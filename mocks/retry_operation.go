// Code generated by mockery. DO NOT EDIT.

package tcontainer_mocks

import (
	context "context"

	dockertest "github.com/ory/dockertest/v3"
	mock "github.com/stretchr/testify/mock"
)

// RetryOperation is an autogenerated mock type for the RetryOperation type
type RetryOperation struct {
	mock.Mock
}

type RetryOperation_Expecter struct {
	mock *mock.Mock
}

func (_m *RetryOperation) EXPECT() *RetryOperation_Expecter {
	return &RetryOperation_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, container
func (_m *RetryOperation) Execute(ctx context.Context, container *dockertest.Resource) error {
	ret := _m.Called(ctx, container)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dockertest.Resource) error); ok {
		r0 = rf(ctx, container)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetryOperation_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type RetryOperation_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - container *dockertest.Resource
func (_e *RetryOperation_Expecter) Execute(ctx interface{}, container interface{}) *RetryOperation_Execute_Call {
	return &RetryOperation_Execute_Call{Call: _e.mock.On("Execute", ctx, container)}
}

func (_c *RetryOperation_Execute_Call) Run(run func(ctx context.Context, container *dockertest.Resource)) *RetryOperation_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dockertest.Resource))
	})
	return _c
}

func (_c *RetryOperation_Execute_Call) Return(err error) *RetryOperation_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RetryOperation_Execute_Call) RunAndReturn(run func(context.Context, *dockertest.Resource) error) *RetryOperation_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewRetryOperation creates a new instance of RetryOperation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRetryOperation(t interface {
	mock.TestingT
	Cleanup(func())
}) *RetryOperation {
	mock := &RetryOperation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
