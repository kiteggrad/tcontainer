// Code generated by mockery. DO NOT EDIT.

package retry_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// BackOffContext is an autogenerated mock type for the backOffContext type
type BackOffContext struct {
	mock.Mock
}

type BackOffContext_Expecter struct {
	mock *mock.Mock
}

func (_m *BackOffContext) EXPECT() *BackOffContext_Expecter {
	return &BackOffContext_Expecter{mock: &_m.Mock}
}

// Context provides a mock function with given fields:
func (_m *BackOffContext) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// BackOffContext_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type BackOffContext_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *BackOffContext_Expecter) Context() *BackOffContext_Context_Call {
	return &BackOffContext_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *BackOffContext_Context_Call) Run(run func()) *BackOffContext_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BackOffContext_Context_Call) Return(_a0 context.Context) *BackOffContext_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BackOffContext_Context_Call) RunAndReturn(run func() context.Context) *BackOffContext_Context_Call {
	_c.Call.Return(run)
	return _c
}

// NextBackOff provides a mock function with given fields:
func (_m *BackOffContext) NextBackOff() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NextBackOff")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// BackOffContext_NextBackOff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextBackOff'
type BackOffContext_NextBackOff_Call struct {
	*mock.Call
}

// NextBackOff is a helper method to define mock.On call
func (_e *BackOffContext_Expecter) NextBackOff() *BackOffContext_NextBackOff_Call {
	return &BackOffContext_NextBackOff_Call{Call: _e.mock.On("NextBackOff")}
}

func (_c *BackOffContext_NextBackOff_Call) Run(run func()) *BackOffContext_NextBackOff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BackOffContext_NextBackOff_Call) Return(_a0 time.Duration) *BackOffContext_NextBackOff_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BackOffContext_NextBackOff_Call) RunAndReturn(run func() time.Duration) *BackOffContext_NextBackOff_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields:
func (_m *BackOffContext) Reset() {
	_m.Called()
}

// BackOffContext_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type BackOffContext_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *BackOffContext_Expecter) Reset() *BackOffContext_Reset_Call {
	return &BackOffContext_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *BackOffContext_Reset_Call) Run(run func()) *BackOffContext_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BackOffContext_Reset_Call) Return() *BackOffContext_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *BackOffContext_Reset_Call) RunAndReturn(run func()) *BackOffContext_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// NewBackOffContext creates a new instance of BackOffContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackOffContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *BackOffContext {
	mock := &BackOffContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
